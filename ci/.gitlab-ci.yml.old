image: docker:stable

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: emcmongoose/mongoose
  IMAGE_FILE_NAME: build/mongoose.tar
  JAVA_HOME: /opt/jdk-11.0.2+9
  ROBOTEST_CONTAINER_WORKING_DIR: /root/mongoose
  SERVICE_HOST: docker # should be used instead of the "localhost"/"127.0.0.1" in GL CI

services:
  - docker:dind

stages:
  - build
  - build_docker_image
  - test_functional # functional containerized tests
  - deploy

before_script:
  - apk --update add --no-cache ca-certificates curl openssl binutils xz gnupg
  - curl -Lks https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.2%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.2_9.tar.gz -o /tmp/jdk11.tgz
  - tar xvf /tmp/jdk11.tgz -C /opt
  - rm -rf /tmp/jdk11.tgz
  - export PATH=${PATH}:${JAVA_HOME}/bin
  - export GLIBC_VER="2.28-r0"
  - export ALPINE_GLIBC_REPO="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"
  - export GCC_LIBS_URL="https://archive.archlinux.org/packages/g/gcc-libs/gcc-libs-8.3.0-1-x86_64.pkg.tar.xz"
  - export GCC_LIBS_SHA256=400e2ecb1b2dfb40e09cdb6805f0075cbc88e6fcef9b73f23c64a6e709dcd61b
  - export ZLIB_URL="https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.11-3-x86_64.pkg.tar.xz"
  - export ZLIB_SHA256=17aede0b9f8baa789c5aa3f358fbf8c68a5f1228c5e6cba1a5dd34102ef4d4e5
  - curl -Lks https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
  - curl -Lks ${ALPINE_GLIBC_REPO}/${GLIBC_VER}/glibc-${GLIBC_VER}.apk > /tmp/${GLIBC_VER}.apk
  - apk add --allow-untrusted /tmp/${GLIBC_VER}.apk
  - curl -Lks ${GCC_LIBS_URL} -o /tmp/gcc-libs.tar.xz
  - echo "${GCC_LIBS_SHA256}  /tmp/gcc-libs.tar.xz" | sha256sum -c -
  - mkdir /tmp/gcc
  - tar -xf /tmp/gcc-libs.tar.xz -C /tmp/gcc
  - mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib
  - strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so*
  - curl -Lks ${ZLIB_URL} -o /tmp/libz.tar.xz
  - echo "${ZLIB_SHA256}  /tmp/libz.tar.xz" | sha256sum -c -
  - mkdir /tmp/libz
  - tar -xf /tmp/libz.tar.xz -C /tmp/libz
  - mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib
  - apk del binutils
  - rm -rf /tmp/${GLIBC_VER}.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*

build:
  stage: build
  script:
    - ./gradlew clean jar
  artifacts:
    paths:
      - build/libs/mongoose-*.jar

build_docker_image:
  stage: build_docker_image
  variables:
    DOCKERFILE: Dockerfile
  script:
    - ./gradlew dockerBuildImage
    - export VERSION=$(cat build.gradle | grep version\ = | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
    - docker save ${IMAGE_NAME}:${VERSION} > ${IMAGE_FILE_NAME}
  artifacts:
    paths:
      - ${IMAGE_FILE_NAME}

release_to_maven_repo:
  stage: deploy
  script:
    - if [ ! -z "$GPG_SECRET_KEYS" ]; then echo $GPG_SECRET_KEYS | base64 -d | gpg --import --batch; fi
    - if [ ! -z "$GPG_OWNERTRUST" ]; then echo $GPG_OWNERTRUST | base64 -d | gpg --import-ownertrust --batch; fi
    - mkdir /tmp/.gnupg
    - if [ ! -z "$GPG_SECRING" ]; then echo $GPG_SECRING | base64 -d > /tmp/.gnupg/secring.gpg; fi
    - ./gradlew -Psigning.keyId=${SIGNING_KEY_ID} -Psigning.password=${SIGNING_PASSWORD} -Psigning.secretKeyRingFile=/tmp/.gnupg/secring.gpg -PossrhUsername=${OSSRH_USERNAME} -PossrhPassword=${OSSRH_PASSWORD} publishToNexus closeAndReleaseRepository
  only:
    - latest
  except:
    - branches

deploy_to_docker_hub:
  stage: deploy
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - docker load < ${IMAGE_FILE_NAME}
    - export VERSION=$(cat build.gradle | grep version\ = | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
    - docker push ${IMAGE_NAME}:${VERSION}
    - docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:latest
    - docker push ${IMAGE_NAME}:latest
  only:
    - latest
  except:
    - branches
